{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"margin",
				"margin-top"
			],
			[
				"json",
				"json_encode"
			],
			[
				"high",
				"highland-db"
			],
			[
				"get",
				"getenv"
			],
			[
				"m",
				"mountPoints"
			],
			[
				"container",
				"containerPath"
			],
			[
				"heartbeat",
				"heartbeat-app"
			],
			[
				"product",
				"productGroups"
			],
			[
				"new",
				"newvalue"
			],
			[
				"order",
				"orderproducts"
			],
			[
				"chan",
				"channel"
			],
			[
				"cha",
				"channelspace"
			],
			[
				"Curren",
				"CurrencySchema"
			],
			[
				"OrderS",
				"OrderSchema"
			],
			[
				"n",
				"notifier"
			],
			[
				"re",
				"record"
			],
			[
				"Expe",
				"ExpenseTypes"
			],
			[
				"Ex",
				"ExpenseTypes"
			],
			[
				"ex",
				"expensetypes"
			],
			[
				"Product",
				"ProductTypes"
			],
			[
				"Pro",
				"ProductTypes"
			],
			[
				"ev",
				"evaluatesToTrue"
			],
			[
				"Produ",
				"ProductTypeSchema"
			],
			[
				"Pr",
				"ProductTypeSchema"
			],
			[
				"con",
				"containertypes"
			],
			[
				"crud",
				"crudType"
			],
			[
				"Deliver",
				"DeliveryMethods"
			],
			[
				"De",
				"DeliveryMethods"
			],
			[
				"Del",
				"Deliverymethod"
			],
			[
				"DeliveryM",
				"DeliveryMethod"
			],
			[
				"Deli",
				"DeliveryMethods"
			],
			[
				"delev",
				"deliverymethods"
			],
			[
				"prot",
				"prototype"
			],
			[
				"Person",
				"PersonSchema"
			],
			[
				"not",
				"notStopWord"
			],
			[
				"from",
				"fromUser"
			],
			[
				"C",
				"Company"
			],
			[
				"remote",
				"remoteRecord"
			],
			[
				"getR",
				"getRecord"
			],
			[
				"text",
				"text-align"
			],
			[
				"Comp",
				"Company"
			],
			[
				"loca",
				"localRecord"
			],
			[
				"up",
				"updateRecord"
			],
			[
				"loac",
				"localRecord"
			],
			[
				"su",
				"superNow"
			],
			[
				"last",
				"lastUpdated"
			],
			[
				"late",
				"latestRecord"
			],
			[
				"push",
				"pushUpRecord"
			],
			[
				"lo",
				"localRecord"
			],
			[
				"remo",
				"remoteRecord"
			],
			[
				"snap",
				"snapshot"
			],
			[
				"F",
				"FIREBASE_URL"
			],
			[
				"fire",
				"firebaseRecord"
			],
			[
				"on",
				"onCrudEvent"
			],
			[
				"min-",
				"min-width"
			],
			[
				"W",
				"Web_Site"
			],
			[
				"list",
				"listeners_are_registered"
			],
			[
				"lis",
				"listeners_are_registered"
			],
			[
				"Com",
				"Companies"
			],
			[
				"set",
				"setWithPriority"
			],
			[
				"txt",
				"txtBag"
			],
			[
				"to",
				"tokenizer"
			],
			[
				"pro",
				"prototype"
			],
			[
				"p",
				"payload"
			],
			[
				"even",
				"eventName"
			],
			[
				"sort",
				"sortKey"
			],
			[
				"full",
				"fullTextSearch"
			],
			[
				"res",
				"results"
			],
			[
				"inc",
				"incrementBy"
			],
			[
				"sco",
				"scorify"
			],
			[
				"table",
				"tablename"
			],
			[
				"st",
				"startWith"
			],
			[
				"pr",
				"prototype"
			],
			[
				"Compan",
				"CompanySchema"
			],
			[
				"pos",
				"positions"
			],
			[
				"create",
				"createTextBag"
			],
			[
				"s",
				"schema"
			],
			[
				"x",
				"xrecord"
			],
			[
				"background-c",
				"background-color"
			],
			[
				"fore",
				"foreignKeys"
			],
			[
				"firebase",
				"firebase-simple-login"
			],
			[
				"bower",
				"bower_components"
			],
			[
				"rand",
				"randomNames"
			],
			[
				"wei",
				"weirdStore"
			],
			[
				"coll",
				"collection_names"
			],
			[
				"collection",
				"collection_name"
			],
			[
				"ser",
				"serialize"
			],
			[
				"sqlite",
				"sqlitedb"
			],
			[
				"sum",
				"sumOfDigits"
			],
			[
				"perm",
				"permutations"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 287.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"comment",
				"Toggle Comment"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 467.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/seanmacdonald/REPOS/phpepl/Dockerfile",
		"/Users/seanmacdonald/REPOS/phpepl/.gitignore",
		"/Users/seanmacdonald/REPOS/phpepl/public/index.html",
		"/Users/seanmacdonald/REPOS/phpepl/.dockerignore",
		"/Users/seanmacdonald/REPOS/beautiful-letter/templates/default.latex",
		"/Users/seanmacdonald/REPOS/beautiful-letter/hf2.yml",
		"/Users/seanmacdonald/REPOS/beautiful-letter/hf2.md",
		"/Users/seanmacdonald/REPOS/beautiful-letter/build",
		"/Users/seanmacdonald/REPOS/beautiful-letter/sean.md",
		"/Users/seanmacdonald/REPOS/beautiful-letter/sean.yml",
		"/Users/seanmacdonald/REPOS/beautiful-letter/weird",
		"/Users/seanmacdonald/REPOS/beautiful-letter/james.md",
		"/Users/seanmacdonald/REPOS/sizeify-client/python/james.md",
		"/Users/seanmacdonald/REPOS/beautiful-letter/james.yml",
		"/Users/seanmacdonald/REPOS/beautiful-letter/HFTAD001.yml",
		"/Users/seanmacdonald/REPOS/highland-farms/docker.app.run",
		"/Users/seanmacdonald/REPOS/highland-farms/.sjc/run.sh",
		"/Users/seanmacdonald/REPOS/highland-farms/code/info.php",
		"/Users/seanmacdonald/REPOS/highland-farms/code/debug.php",
		"/Users/seanmacdonald/REPOS/highland-farms/docker.app.file",
		"/Users/seanmacdonald/REPOS/highland-farms/docker.db.run",
		"/Users/seanmacdonald/REPOS/highland-farms/docker.app.runHard",
		"/Users/seanmacdonald/REPOS/highland-farms/htdocs/prod/web/index.php",
		"/Users/seanmacdonald/REPOS/highland-farms/docker.db.shell",
		"/Users/seanmacdonald/REPOS/highland-farms/sjc",
		"/Users/seanmacdonald/REPOS/highland-farms/.sjc/stop.sh",
		"/Users/seanmacdonald/REPOS/highland-farms/.sjc/preview.sh",
		"/Users/seanmacdonald/REPOS/highland-farms/.sjc/test.sh",
		"/Users/seanmacdonald/REPOS/highland-farms/docker.db.load_data",
		"/Users/seanmacdonald/REPOS/highland-farms/.sjc/push.sh",
		"/Users/seanmacdonald/REPOS/highland-farms/sjc/push.sh",
		"/Users/seanmacdonald/REPOS/highland-farms/sjc/run.sh",
		"/Users/seanmacdonald/REPOS/highland-farms/sjc.sh",
		"/Users/seanmacdonald/REPOS/highland-farms/sjc/build.sh",
		"/Users/seanmacdonald/REPOS/highland-farms/vars.sh",
		"/Users/seanmacdonald/REPOS/highland-farms/docker.db.file",
		"/Users/seanmacdonald/REPOS/highland-farms/sjc/weird.sh",
		"/Users/seanmacdonald/REPOS/highland-farms/tag.sh",
		"/Users/seanmacdonald/REPOS/highland-farms/docker.db.build",
		"/Users/seanmacdonald/REPOS/highland-farms/build.sh",
		"/Users/seanmacdonald/REPOS/highland-farms/push.sh",
		"/Users/seanmacdonald/REPOS/highland-farms/docker-compose.yml",
		"/Users/seanmacdonald/Library/Application Support/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/Users/seanmacdonald/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/seanmacdonald/Library/Application Support/Sublime Text 3/Packages/User/YAML.sublime-settings",
		"/Users/seanmacdonald/REPOS/highland-farms/htdocs/prod/web/class/include_admin.php",
		"/Users/seanmacdonald/REPOS/highland-farms/htdocs/prod/web/index2.php",
		"/Users/seanmacdonald/REPOS/highland-farms/htdocs/prod/web/database.class.php",
		"/Users/seanmacdonald/REPOS/highland-farms/htdocs/prod/web/settings/settings.php",
		"/Users/seanmacdonald/REPOS/highland-farms/htdocs/prod/web/templates/users/login.html",
		"/Users/seanmacdonald/REPOS/highland-farms/htdocs/prod/web/class/modules/users/user.admin.class.php",
		"/Users/seanmacdonald/REPOS/highland-farms/htdocs/prod/web/class/modules/users/user.class.php",
		"/Users/seanmacdonald/Dropbox/_sync/seanmacdonald/books/topologies2/appendix.xhtml",
		"/Users/seanmacdonald/Dropbox/_sync/seanmacdonald/books/topologies2/content.opf",
		"/Users/seanmacdonald/Dropbox/_sync/seanmacdonald/books/topologies2/hello.js",
		"/Users/seanmacdonald/REPOS/stage.sjc.io/containers/mongoclient/restore",
		"/Users/seanmacdonald/REPOS/stage.sjc.io/containers/mongoclient/Dockerfile",
		"/Users/seanmacdonald/REPOS/stage.sjc.io/containers/oldclark/www/domains/clarkpacific.com/web/info.php",
		"/Users/seanmacdonald/REPOS/stage.sjc.io/containers/oldclark/www/frameworks/gourd04/class.Core.php",
		"/Users/seanmacdonald/REPOS/stage.sjc.io/containers/clarkmongo/Dockerfile",
		"/Users/seanmacdonald/REPOS/stage.sjc.io/containers/clarkmongo/restore",
		"/Users/seanmacdonald/REPOS/stage.sjc.io/containers/clarkmongo/logz/mongod.log",
		"/Users/seanmacdonald/REPOS/stage.sjc.io/common/hosts.json",
		"/Users/seanmacdonald/Downloads/SQL-Translator-0.11021/README",
		"/Users/seanmacdonald/REPOS/stage.sjc.io/vendors.js",
		"/Users/seanmacdonald/REPOS/stage.sjc.io/Dockerrun.aws.json",
		"//",
		"/Users/seanmacdonald/REPOS/stage.sjc.io/www/install",
		"/Users/seanmacdonald/REPOS/stage.sjc.io/www/start",
		"/Users/seanmacdonald/REPOS/stage.sjc.io/www/js/stage.js",
		"/Users/seanmacdonald/REPOS/stage.sjc.io/www/js/500.html",
		"/Users/seanmacdonald/REPOS/stage.sjc.io/www/js/404.html",
		"/Users/seanmacdonald/REPOS/stage.sjc.io/www/js/hosts.json",
		"/Users/seanmacdonald/REPOS/stage.sjc.io/www/js/hosts.js",
		"/Users/seanmacdonald/REPOS/stage.sjc.io/www/js/reverseproxy.js",
		"/Users/seanmacdonald/REPOS/stage.sjc.io/www/js/package.json",
		"/Users/seanmacdonald/REPOS/stage.sjc.io/www/hosts.json",
		"/Users/seanmacdonald/Dropbox/_sync/seanmacdonald/code/convertme/linux/README",
		"/Users/seanmacdonald/REPOS/sizeify/ansible/group_vars/vag/httpd.yml",
		"/Users/seanmacdonald/REPOS/sizeify/ansible/rsync.yml",
		"/Users/seanmacdonald/REPOS/sizeify/httpd.conf",
		"/Users/seanmacdonald/REPOS/sizeify/ansible/files/httpd.conf.j2",
		"/Users/seanmacdonald/REPOS/sizeify/ansible/app.yml",
		"/Users/seanmacdonald/REPOS/sizeify/Vagrantfile",
		"/Users/seanmacdonald/Dropbox/code/ripe/result1.json",
		"/Users/seanmacdonald/REPOS/numops/app/views/orders.html",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/controllers/companies.js",
		"/Users/seanmacdonald/REPOS/numops/app/views/createorder.html",
		"/Users/seanmacdonald/REPOS/numops/app/partials/addproduct.html",
		"/Users/seanmacdonald/REPOS/numops/app/partials/logistics.html",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/services/dbx.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/controllers/orders.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/tmp.js",
		"/Users/seanmacdonald/REPOS/numops/app/index.html",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/services/notifier.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/services/listeners.js",
		"/Users/seanmacdonald/REPOS/numops/app/views/debug.html",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/app.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/controllers/debug.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/services/expensetypes.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/services/currency.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/controllers/products.js",
		"/Users/seanmacdonald/REPOS/numops/app/views/tools.html",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/controllers/expensetypes.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/controllers/suppliers.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/services/producttypes.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/controllers/producttypes.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/controllers/containertypes.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/services/containertypes.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/controllers/units.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/services/schema.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/services/locations.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/controllers/locations.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/services/units.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/controllers/deliverymethods.js",
		"/Users/seanmacdonald/Library/Application Support/Sublime Text 3/Packages/User/JSON.sublime-settings",
		"/Users/seanmacdonald/Library/Application Support/Sublime Text 3/Packages/User/Distraction Free.sublime-settings",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/services/deliverymethods.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/services/orderstates.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/controllers/orderstates.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/controllers/currency.js",
		"/Users/seanmacdonald/REPOS/numops/app/views/createproduct.html",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/services/companies.js",
		"/Users/seanmacdonald/REPOS/numops/app/views/createcontact.html",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/controllers/createcontact.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/services/contacts.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/services/auth.js",
		"/Users/seanmacdonald/REPOS/numops/app/scripts/services/orders.js"
	],
	"find":
	{
		"height": 30.0
	},
	"find_in_files":
	{
		"height": 102.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"ashgrey",
			"atomic",
			"moccasin",
			"mildew",
			"aurometalsaurus",
			"tt",
			"rowc",
			"incon",
			"verbatim",
			"ttfam",
			"verbatim",
			"code",
			"setkoma",
			"math",
			"subsub",
			"color",
			"colorlinks",
			"table",
			"toc",
			"tabu",
			"table",
			"image",
			"pdf",
			"xcolor",
			"tab",
			"frmLogin",
			"frmLogin_ACTION",
			"history_user_events",
			"User",
			"mod_logio",
			"Group",
			"mod_status",
			"\\s+",
			"\\|\\s+",
			"item_Generics",
			"Defining and Calling Functions",
			"“Defining and Calling Functions”\n\nExcerpt From: Apple Inc. “The Swift Programming Language.” iBooks. https://itun.es/ca/jEUH0.l",
			"which will contain a greeting for that person",
			"“which will contain a greeting for that person”\n\nExcerpt From: Apple Inc. “The Swift Programming Language.” iBooks. https://itun.es/ca/jEUH0.l",
			"required",
			"console",
			"orderproduct",
			"orderproducts",
			"delete",
			"http",
			"scope",
			"http",
			"currency.desc",
			"(curencyId, currency) in currencys",
			"Container T",
			"ContainerTypes",
			"container type",
			"deli",
			"<a class=\"garbage\" ",
			"<a ng-click=\"delete",
			"debugger",
			"Auth.signedIn",
			"dbx.getRemoteRecord",
			"Auth",
			"priority",
			"ref.onc",
			"ref.on(",
			"dbx.pushUpRecord",
			"dbx.getRemoteRecord",
			"dbx.updateR",
			"dbx.pushUpRe",
			"dbx.fire",
			"dbx.sync",
			"dbx.fire",
			"\\n",
			"pushUpRec",
			"severiy",
			"console.log",
			"notifications.Companies",
			"fire",
			"INSERT!",
			"dbx.err",
			"uid",
			"pubnub",
			"$rootS",
			"                \n",
			"require",
			"angularfire",
			"wirede",
			"wiredep",
			"wireped",
			"ROW",
			"db_name",
			",",
			"debug.js",
			"close",
			"disconnect",
			"ref",
			"product",
			"hefty",
			"var express = require('express'),\n    fs      = require('fs');\n	mongodb	= require('mongodb');\n\nvar App = function() {\n    var self = this;\n    self.setupVariables = function() {\n        self.ipaddress = process.env.OPENSHIFT_INTERNAL_IP;\n        self.port      = process.env.OPENSHIFT_INTERNAL_PORT || 8080;\n        if (typeof self.ipaddress === \"undefined\") {\n            console.warn('No OPENSHIFT_INTERNAL_IP var, using 127.0.0.1');\n            self.ipaddress = \"127.0.0.1\";\n            self.mongo = {\n	            \"host\": \"localhost\",\n	            \"port\": 27017,\n	            \"username\": null,\n	            \"passwd\": null\n            };\n            self.connection_url = 'mongodb://' + self.mongo.host + ':' + self.mongo.port;\n        } else {\n            self.mongo = {\n	            \"host\": process.env.OPENSHIFT_MONGODB_DB_HOST,\n	            \"port\": process.env.OPENSHIFT_MONGODB_DB_PORT,\n	            \"username\": process.env.OPENSHIFT_MONGODB_DB_USERNAME,\n	            \"passwd\": process.env.OPENSHIFT_MONGODB_DB_PASSWORD\n            };\n            self.connection_url = 'mongodb://' + self.mongo.username + ':' + self.mongo.passwd + '@' + self.mongo.host + ':' + self.mongo.port;\n        } \n    };\n    //	cache\n    self.populateCache = function() {\n        if (typeof self.zcache === \"undefined\") {\n            self.zcache = { 'index.html': '' };\n        }\n        self.zcache['index.html'] = fs.readFileSync('./index.html');\n        self.zcache['css/home.css'] = fs.readFileSync('./css/home.css');\n        self.zcache['css/font-awesome.min.css'] = fs.readFileSync('./css/font-awesome.min.css');\n        self.zcache['js/app.js'] = fs.readFileSync('./js/app.js');\n    };\n    self.cache_get = function(key) { return self.zcache[key]; };\n    /**\n     *  terminator === the termination handler\n     *  Terminate server on receipt of the specified signal.\n     *  @param {string} sig  Signal to terminate on.\n     */\n    self.terminator = function(sig){\n        if (typeof sig === \"string\") {\n           console.log('%s: Received %s - terminating sample app ...',\n                       Date(Date.now()), sig);\n           process.exit(1);\n        }\n        console.log('%s: Node server stopped.', Date(Date.now()) );\n    };\n    self.setupTerminationHandlers = function(){\n        process.on('exit', function() { self.terminator(); });\n        ['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',\n         'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'\n        ].forEach(function(element, index, array) {\n            process.on(element, function() { self.terminator(element); });\n        });\n    };\n    //	db\n    self.connectToDB = function() {\n		mongodb.Db.connect(self.connection_url, function(err, db) {\n			if (err) console.log(err);\n	    	var animalCol = db.collection(\"animals\");\n	    	var adjCol = db.collection(\"adjectives\");\n	    	animalCol.remove({}, function() {});\n	    	adjCol.remove({}, function() {});\n	    	var animals = fs.readFileSync(\"./animals.txt\", \"utf8\").split(\"\\n\");\n	    	var adjectives = fs.readFileSync(\"./adjectives.txt\", \"utf8\").split(\"\\n\");\n		    db.createCollection(\"animals\", function(err, collection) {\n		    	if (err) {\n			    	console.log('create collection didnt work',err);\n		    	}\n		    	for (var i = 0; i < animals.length; i++) {\n		    		if (animals[i] !== '') {\n			    		collection.insert({\"name\":animals[i]}, function(){});		\n		    		}\n		    	}\n		    });\n		    db.createCollection(\"adjectives\", function(err, collection) {\n			    for (var i = 0; i < adjectives.length; i++) {\n				    if (adjectives[i] != '') {\n					    var adj = adjectives[i].split(\" \")[1];\n					    (function(adj) {\n							var result = collection.findOne({name: adj}, function(err, doc){\n							    if (typeof doc !== null) {\n									collection.insert({name: adj}, console.log);    \n							    }\n						    });		    \n					    })(adj);				    \n				    }\n			    }\n		    });		\n		});\n    };\n    //	routing\n    self.createRoutes = function() {\n        self.routes = { };\n        self.routes['/health'] = function(req, res) {\n            res.send('1');\n        };\n        self.routes['/'] = function(req, res) {\n            res.setHeader('Content-Type', 'text/html');\n            res.send(self.cache_get('index.html'));\n        };\n        self.routes['/js/app.js'] = function(req,res) {\n	        res.setHeader('Content-Type', 'text/javascript');\n	        res.send(self.cache_get('js/app.js'));\n        };\n        self.routes['/js/adjectives.js'] = function(req,res) {\n	        res.setHeader('Content-Type', 'text/javascript');\n	        mongodb.Db.connect(self.connection_url, function(err, db) {\n		        var animals_cursor = db.collection('adjectives').find({});\n		        var result = animals_cursor.toArray( function(err,docs) {\n		        	res.send(\n		        		'var adjectives = '\n		        		+ JSON.stringify( docs.map(function(d){ return d.name; }))\n		        		+ ';'\n		        	);\n			    });\n	        });\n        };\n        self.routes['/js/animals.js'] = function(req,res) {\n	        res.setHeader('Content-Type', 'text/javascript');\n	        mongodb.Db.connect(self.connection_url, function(err, db) {\n		        var animals_cursor = db.collection('animals').find({});\n		        var result = animals_cursor.toArray( function(err,docs) {\n		        	res.send(\n		        		'var animals = '\n		        		+ JSON.stringify( docs.map(function(d){ return d.name; }))\n		        		+ ';'\n		        	);\n			    });\n	        });\n        }\n    };\n    self.initializeServer = function() {\n        self.createRoutes();\n        self.app = express.createServer();\n        for (var r in self.routes) {\n            self.app.get(r, self.routes[r]);\n        }\n        self.app.get( /^\\/css\\/.*\\.css$/, function(req,res) {\n	        var cachekey = req.url.replace(/^\\//,'');\n	        res.setHeader('Content-Type', 'text/css');\n	        res.send(self.cache_get(cachekey));\n        });\n        self.app.get( /^\\/font\\//, function(req,res) {\n	        res.setHeader('Content-Type', 'application/x-font-woff');\n	        res.send( fs.readFileSync('.' + req.url) );\n        });\n    };\n    self.initialize = function() {\n        self.setupVariables();\n        self.populateCache();\n        self.setupTerminationHandlers();\n        self.connectToDB();\n        // Create the express server and routes.\n        self.initializeServer();\n    };\n    self.start = function() {\n        //  Start the app on the specific interface (and port).\n        self.app.listen(self.port, self.ipaddress, function() {\n            console.log('%s: Node server started on %s:%d ...',\n                        Date(Date.now() ), self.ipaddress, self.port);\n        });\n    };\n};\n\nvar zapp = new App();\nzapp.initialize();\nzapp.start();",
			"	"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			",",
			"",
			"currency.Name",
			"currency in currencys",
			"<a class=\"trash\" ",
			" <a class=\"garbage\" href=\"\" ng-click=\"delete",
			" ",
			"",
			"\\n"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 30.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "php7repl.sublime-project",
	"replace":
	{
		"height": 56.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 362.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
